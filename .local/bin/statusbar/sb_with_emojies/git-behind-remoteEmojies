#!/usr/bin/env bash
# behind-upstream

#
# how many commits you're behind upstream
#
#
# requires:
#
# - setup
#     (add upstream as remote) via:
#     git remote add upstream URL
# 
# - cached SSH passphrase for fetching (TODO: encrypted git passphrase via pass)
#
#
# usage:
#
# git-behind-remote REMOTE_NAME REMOTE_BRANCH_NAME
#
# REMOTE_NAME        = "upstream" by default
# REMOTE_BRANCH_NAME = "master"   by default
#
# git remote add REMOTE_NAME URL
# and add the specified remote to your repo's remotes:
#
# I'm using the git bare repo approach, as explained in the arch-wiki:
# https://wiki.archlinux.org/index.php/Dotfiles#Tracking_dotfiles_directly_with_Git
#

gitCmd="git --git-dir=$HOME/.dotfiles --work-tree=$HOME"


### TODO
# passName="bin--behind-remote"
# token="$(pass "$passName")"

upstreamName="${1:-upstream}"
upstreamBranchName="${2:-master}"
upstream="$upstreamName/$upstreamBranchName"

handle-statusbar() {
	case $BLOCK_BUTTON in
		1) 
			dir="$(dirname "$0")"
			script="$dir/git-log"

			setsid "$TERMINAL" -e "$script" "$gitCmd" "$upstream" &

			;;

		2)
			#notify-send \
			#-t 60000 \
			#"\"$upstream\" log" \
			#"$($gitCmd log "$upstream" -n 10 --abbrev-commit --pretty=format:'\n%C(yellow)%s\n%Cgreen(%cr)')"

			URL="$($gitCmd ls-remote --get-url upstream)"

			xdg-open "$URL"

			;;

		3)
			notify-send -t 10000 "diff | wc -l" "$(bash -c "$gitCmd diff $upstream" | wc)" 

			setsid "$TERMINAL" -e bash -c "$gitCmd diff $upstream" &

			;;

		4) 
			notify-send \
			"git-behind-remote module" \
			"\n\- Shows the latest commits in \"$upstream\"."

			;;

	esac
}

behind-remote() {
	#notify-send "behind-remote"
	# 1: fetch from upstream
	$gitCmd fetch "$upstreamName"

	# 2: count how many commits we're behind
	# git             <upstream>/<branch>  wc -l
	$gitCmd rev-list "$upstream" ^HEAD | wc --lines
}

handle-statusbar

behind-remote

