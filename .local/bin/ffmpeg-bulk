#!/bin/bash - 
#===============================================================================
#
#         USAGE: ./this.sh --help
# 
#   DESCRIPTION: Create a ffmpeg conversion script from a list of input files.
# 
#       OPTIONS: ---
#  REQUIREMENTS: sed, gawk, ffmpeg, tee
#          BUGS: ---
#         NOTES: ---
#        AUTHOR: Sylvain Saubier (ResponSyS), mail@sylsau.com
#       CREATED: 01/05/16 14:09
#===============================================================================

# TODO: remake this
# 	make list internally
# 	update the whole thing

[[ $DEBUG ]] && set -o nounset
set -o pipefail -o errexit -o errtrace
trap 'echo -e "${FMT_BOLD}ERROR${FMT_OFF}: at $FUNCNAME:$LINENO"' ERR

readonly PROGRAM_NAME="${0##*/}"
readonly SCRIPT_NAME="${0##*/}"

readonly FMT_BOLD='\e[1m'
readonly FMT_UNDERL='\e[4m'
readonly FMT_OFF='\e[0m'

readonly ERR_NO_CMD=60

FORCE_EXEC=
readonly F_WORKLIST='/tmp/ffmpegbulk_list'
F_FFMPEG_SCRIPT='./ffmpeg_cmd.sh'
F_LIST=
ARGSIN=
ARGSOUT=
EXTIN=
EXTOUT=


# $1 = command to test (string)
fn_need_cmd() {
    if ! command -v "$1" > /dev/null 2>&1
        then fn_err "need '$1' (command not found)" $ERR_NO_CMD
    fi
}
# $1 = message (string)
m_say() {
    echo -e "$PROGRAM_NAME: $1"
}
# $1 = error message (string), $2 = return code (int)
fn_err() {
    m_say "${FMT_BOLD}ERROR${FMT_OFF}: $1" >&2
    exit $2
}

fn_help() {
    cat << EOF
$PROGRAM_NAME v20170917
    Create a ffmpeg conversion script from a list of input files.

REQUIREMENTS
    sed, gawk, ffmpeg, tee

USAGE
    $PROGRAM_NAME [--extin|-xi EXTENSION_OF_IN_FILES] [--extout|-xo EXTENSION_OF_OUT_FILES] [--argsin|-ai FFMPEG_ARGS_IN] [--argsout|-ao FFMPEG_ARGS_OUT] [--outfile|-o SCRIPT_FILENAME] [--execute|-e] LIST

OPTIONS AND ARGUMENTS
    LIST              pathname to text list of input file containing one filename per line
    FFMPEG_ARGS_IN    ffmpeg arguments for the input file
    FFMPEG_ARGS_OUT   ffmpeg arguments for the output file
    -e                directly executes the newly created script, then prompts for removal

EXAMPLE
    Creates a list of all .flac files in the current directory:
        $ ls -x1 *.flac > my_list_of_flac_files.txt

    Creates a ffmpeg script named 'wewlads.sh' which converts each listed .flac 
    file to a .opus music file with the specified options:
        $ $PROGRAM_NAME -xi .flac -xo .opus --argsout "-c:a opus -b:a 450k" \\
        -o wewlads.sh /tmp/my_list_of_flac_files.txt

    Executes the newly created script and converts every single .flac file to .opus files.
        $ ./wewlads.sh

    Creates a ffmpeg script to convert each listed .wav file in cdda_list.txt to 
    a .flac music file and executes it right away before prompting for its 
    removal (equivalent to both previous commands put together plus \`rm -i 
    wewlads.sh\`).
        $ $PROGRAM_NAME -xi .wav -xo .flac cdda_list.txt -e

AUTHOR
    Written by Sylvain Saubier (<http://SystemicResponse.com>)

REPORTING BUGS
    Mail at: <feedback@sylsau.com>
EOF
}

fn_show_params() {
    m_say "list file is: $F_LIST, -xi: $EXTIN, -xo: $EXTOUT, -ai: $ARGSIN, -ao: $ARGSOUT, -o: $F_FFMPEG_SCRIPT" >&2
}

fn_need_cmd "sed"
fn_need_cmd "gawk"
fn_need_cmd "ffmpeg"
fn_need_cmd "tee"

if test -z "$*"; then
    fn_help
    exit
else
    # Individually check provided args
    while test -n "$1" ; do
        case $1 in
            "--help"|"-h")
                fn_help
                exit
                ;;
            "--extin"|"-xi")
                EXTIN=$2
                shift
                ;;
            "--extout"|"-xo")
                EXTOUT=$2
                shift
                ;;
            "--argsin"|"-ai")
                ARGSIN=$2
                shift
                ;;
            "--argsout"|"-ao")
                ARGSOUT=$2
                shift
                ;;
            "--outfile"|"-o")
                F_FFMPEG_SCRIPT="$2"
                shift
                ;;
            "--execute"|"-e")
                FORCE_EXEC=1
                ;;
            *)
		# TODO: check that file exists, exit if not
		[[ -e "$1" ]] || { echo "file '$1' does not exist"; exit 127; }
                F_LIST="$1"
                ;;
        esac	# --- end of case ---
        # Delete $1
        shift
    done
fi

if test "$F_LIST" = ""; then
    fn_err "no list file provided !"
fi

[[ $DEBUG ]] && fn_show_params

cp "$F_LIST" "$F_WORKLIST" || exit

sed -i "s/$EXTIN//" "$F_WORKLIST"

m_say "generating script as follows:"
echo "# Script generated by $PROGRAM_NAME
# Press CTRL+C (^C) to exit the script while in execution" > "$F_FFMPEG_SCRIPT"
gawk -v v_xi="$EXTIN" -v v_xo="$EXTOUT" -v v_ai="$ARGSIN" -v v_ao="$ARGSOUT" '{print "ffmpeg "v_ai" -i \""$0 v_xi"\" "v_ao" \""$0 v_xo"\" || exit"}' "$F_WORKLIST" | tee -a "$F_FFMPEG_SCRIPT"

m_say "script generated"
m_say "granting execution permission..."
chmod ug+x "$F_FFMPEG_SCRIPT"
m_say "script \"$F_FFMPEG_SCRIPT\" now ready to be executed"

# isn't that part messy asf fam?
if [[ $FORCE_EXEC ]]; then
#     # if relative path to F_FFMPEG_SCRIPT, make it absolute
#     if test "$(basename "$F_FFMPEG_SCRIPT")" = "$F_FFMPEG_SCRIPT"; then
#         F_FFMPEG_SCRIPT="$(pwd)/$F_FFMPEG_SCRIPT"
#         #m_say "corrected script name : $F_FFMPEG_SCRIPT"
#     fi
#     "$F_FFMPEG_SCRIPT"
#     rm -i "$F_FFMPEG_SCRIPT" "$F_LIST"
    trap "rm -i '$F_FFMPEG_SCRIPT' '$F_LIST'" EXIT
    /bin/bash "$F_FFMPEG_SCRIPT" 
fi

exit
