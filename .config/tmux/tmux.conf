# # set only on OS X where it's required
# set -g default-command "reattach-to-user-namespace -l $SHELL"

# source .tmux.conf as suggested in `man tmux`
bind R source-file '/home/mah/.config/tmux/tmux.conf'

set -g base-index 1
setw -g mode-keys vi
unbind C-b # unbind default leader key
set-option -g prefix C-space
######################
### DESIGN CHANGES ###
######################
# The statusbar {
# set -g status-position bottom
# set -g status-bg colour234
# set -g status-fg colour137
# set -g status-left ''
# set -g status-right '#[fg=colour233,bg=colour241,bold] %m/%d #[fg=colour233,bg=colour245,bold] %I:%M '
# set -g status-right-length 50
# set -g status-left-length 20
# setw -g window-status-current-format ' #I#[fg=colour250]:#[fg=colour255]#W#[fg=colour50]#F '
# setw -g window-status-format ' #I#[fg=colour237]:#[fg=colour250]#W#[fg=colour244]#F '

# theme of mine
# set-option -g default-terminal "xterm-256color"
# set-option -g status-justify left
# setw -g mode-style bg=black
set-option -g pane-active-border-style fg=green
set-option -g status-bg "#282828" # colour213 # pink
set-option -g status-fg black
set-option -g status-interval 1
set-option -g status-left '#[fg=#517d6e,bold]» #[default]'
set-option -g status-right ' #[fg=black][#[fg=#517d6e,bold]#S#[fg=#517d6e,default]] #[fg=magenta,bold]%R #[fg=#517d6e,bold]#T «'

set-option -g visual-activity off
set-option -g set-titles on
set-option -g set-titles-string '#H:#S.#I.#P #W #T'

# address vim mode switching delay (http://superuser.com/a/252717/65504)
set -s escape-time 0

# increase scrollback buffer size
set -g history-limit 50000
#
# # tmux messages are displayed for 4 seconds
set -g display-time 4000
#
# # refresh 'status-left' and 'status-right' more often
set -g status-interval 5
#
#
# # upgrade $TERM
set -g default-terminal "screen-256color"
#
# # emacs key bindings in tmux command prompt (prefix + :) are better than
# # vi keys, even for vim users
set -g status-keys emacs
#
# # focus events enabled for terminals that support them
set -g focus-events on
#
# # super useful when using "grouped sessions" and multi-monitor setup
setw -g aggressive-resize on
# # easier and faster switching between next/prev window
bind C-p previous-window
bind C-n next-window

# if prefix is 'C-a'
bind C-a send-prefix
bind a last-window

bind-key -T copy-mode-vi y send-keys -X copy-pipe-and-cancel "xclip -sel clip -i"

# List of plugins
# hit prefix-I to install
# set -g @plugin 'tmux-plugins/tpm'

# for saving tmux sessions
set -g @plugin 'tmux-plugins/tmux-resurrect'
set -g @continuum-restore 'on'
# for automatic saving (every 15mins) and starting tmux sessions - along side resurrect
set -g @plugin 'tmux-plugins/tmux-continuum'
# tmux systemd (only) service using continum
# set -g @continuum-boot 'on'

# Other examples:
# set -g @plugin 'github_username/plugin_name'
# set -g @plugin 'github_username/plugin_name#branch'
# set -g @plugin 'git@github.com:user/plugin'
# set -g @plugin 'git@bitbucket.com:user/plugin'

# Initialize TMUX plugin manager (keep this line at the very bottom of tmux.conf)
run '~/.config/tmux/plugins/tpm/tpm'


# set  -g status-keys vi
# # set -ga terminal-overrides ',*:Ss=\E[%p1%d q:Se=\E[2 q'
#   set -ga terminal-overrides '*:Ss=\E[%p1%d q:Se=\E[ q'
#
# # https://github.com/matze/vim-move/issues/15#issuecomment-168177827
# set -s escape-time 0
#
# bind-key C-c copy-mode
# bind-key C-space copy-mode
#
# # Setup 'v' to begin selection as in Vim
# #bind-key -t vi-copy v begin-selection
# #bind-key -t vi-copy y copy-pipe "reattach-to-user-namespace pbcopy"
#
# # Update default binding of `Enter` to also use copy-pipe
# # unbind -t vi-copy Enter
# # bind-key -t vi-copy Enter copy-pipe "reattach-to-user-namespace pbcopy"
#
# # https://www.rushiagr.com/blog/2016/06/16/everything-you-need-to-know-about-tmux-copy-pasting-ubuntu/
# bind-key -T copy-mode-vi v send-keys -X begin-selection
# bind-key -T copy-mode-vi y send-keys -X copy-selection
# bind-key -T copy-mode-vi r send-keys -X rectangle-toggle
#
# bind-key -T copy-mode-vi y send-keys -X copy-pipe-and-cancel "xclip -sel clip -i"
#
# #
# ############################################################################
# ############################################################################
# # Reset Prefix
# ############################################################################
# #set -g prefix C-space # enable this if you use C-a & C-o for jumping to beggining/end of line in terminal (meh, use vi)
# set -g prefix C-a
# # Start windows and panes at 1, not 0 (https://unix.stackexchange.com/a/35932/332452)
# set -g base-index 1
# setw -g pane-base-index 1
# #
# setw -g mode-keys vi
# # setw -g mode-style bg=black
# set-option -g default-terminal "xterm-256color"
# # set-option -g pane-active-border-style fg=green
# set-window-option -g xterm-keys on # for vim
# set-window-option -g mode-keys vi # vi key
# set-window-option -g monitor-activity on
# # set-window-option -g window-status-current-style fg=white
# # set-window-option -g window-status-current-style bg=white
# setw -g window-status-current-style reverse
# setw -g automatic-rename
# set -g mouse on
# set -g history-limit 30000
# set -g terminal-overrides 'xterm*:smcup@:rmcup@'
# set-option -g status-justify left
# # set-option -g status-bg black # colour213 # pink
# # set-option -g status-fg #517d6e
# set-option -g status-interval 1
# # set-option -g status-left '#[fg=#517d6e,bold]» #[default]'
# # set-option -g status-right ' #[fg=#517d6e][#[fg=#517d6e,bold]#S#[fg=#517d6e,default]] #[fg=magenta,bold]%R #[fg=#517d6e,bold]#T «'
# set-option -g visual-activity off
# set-option -g set-titles on
# set-option -g set-titles-string '#H:#S.#I.#P #W #T'
# unbind -T root C-c
# unbind j
# unbind '"' # unbind horizontal split
# unbind %   # unbind vertical split
# unbind C-j # vim
# unbind C-k # vim
# bind-key r source-file ~/.config/tmux/tmux.conf \; display "reloaded"
#
# bind-key c split-window -h # split pane horizontally
# bind-key -n 'C-\' split-window -h # split pane horizontally
# bind-key -n 'M-\' split-window -h # split pane horizontally
#
# bind-key v split-window -v # split pane vertically
# ## bind-key -n 'C-/' split-window -v # split pane vertically ## broken :/
# bind-key -n 'M-/' split-window -v # split pane vertically
#
# bind-key Space list-panes
# bind-key Enter break-pane
# bind-key Space command-prompt "joinp -t:%%" # %% = prompt for window.pane [-V|H] # vert|hor split
# bind-key -n C-up prev
# bind-key -n C-left prev
# bind-key -n C-S-Tab prev # broken :c
# bind-key -n C-Tab next   # broken :c
# bind-key -n C-right next
# bind-key -n C-down next
# # bind-key -n C-n new-window
# bind-key -n C-s new-window
# bind-key -n C-x kill-window
#
# # C-j & C-k would interferes with vim, C-l is clear etc. etc.
# #bind-key -n C-h previous-window
# #bind-key -n C-l next-window
#
# ###bind C-n new-window
# ###bind C-j previous-window
# ###bind C-k next-window
# #bind-key C-a last-window # C-a C-a for last active window
# bind A command-prompt "rename-window %%"
# # By default, all windows in a session are constrained to the size of the
# # smallest client connected to that session,
# # even if both clients are looking at different windows.
# # It seems that in this particular case, Screen has the better default
# # where a window is only constrained in size if a smaller client
# # is actively looking at it.
# setw -g aggressive-resize on
# bind-key h select-pane -L
# bind-key j select-pane -D
# bind-key k select-pane -U
# bind-key l select-pane -R
# bind-key -r C-h resize-pane -L
# bind-key -r C-j resize-pane -D
# bind-key -r C-k resize-pane -U
# bind-key -r C-l resize-pane -R
# bind o select-layout "active-only"
# bind M-- select-layout "even-vertical"
# bind M-| select-layout "even-horizontal"
# bind -n C-t rotate-window
#
# bind-key -n M-q detach-client
# ## bind-key -n M-d kill-window ## broken :/
# ## bind-key M-d kill-window ## broken :/
#
# # quick windows! will also create it if does not already exist !! https://unix.stackexchange.com/a/285648/332452
# bind-key -n C-1 if-shell 'tmux select-window -t :1' '' 'new-window -t :1'
# bind-key -n C-2 if-shell 'tmux select-window -t :2' '' 'new-window -t :2'
# bind-key -n C-3 if-shell 'tmux select-window -t :3' '' 'new-window -t :3'
# bind-key -n C-4 if-shell 'tmux select-window -t :4' '' 'new-window -t :4'
# bind-key -n C-5 if-shell 'tmux select-window -t :5' '' 'new-window -t :5'
# bind-key -n C-6 if-shell 'tmux select-window -t :6' '' 'new-window -t :6'
# bind-key -n C-7 if-shell 'tmux select-window -t :7' '' 'new-window -t :7'
# bind-key -n C-8 if-shell 'tmux select-window -t :8' '' 'new-window -t :8'
# bind-key -n C-9 if-shell 'tmux select-window -t :9' '' 'new-window -t :9'
# bind-key -n C-0 if-shell 'tmux select-window -t :10' '' 'new-window -t :10'
#
# bind-key -n M-1 if-shell 'tmux select-window -t :1' '' 'new-window -t :1'
# bind-key -n M-2 if-shell 'tmux select-window -t :2' '' 'new-window -t :2'
# bind-key -n M-3 if-shell 'tmux select-window -t :3' '' 'new-window -t :3'
# bind-key -n M-4 if-shell 'tmux select-window -t :4' '' 'new-window -t :4'
# bind-key -n M-5 if-shell 'tmux select-window -t :5' '' 'new-window -t :5'
# bind-key -n M-6 if-shell 'tmux select-window -t :6' '' 'new-window -t :6'
# bind-key -n M-7 if-shell 'tmux select-window -t :7' '' 'new-window -t :7'
# bind-key -n M-8 if-shell 'tmux select-window -t :8' '' 'new-window -t :8'
# bind-key -n M-9 if-shell 'tmux select-window -t :9' '' 'new-window -t :9'
# bind-key -n M-0 if-shell 'tmux select-window -t :10' '' 'new-window -t :10'
#
# #bind-key -n C-1 select-window -t :=1
# #bind-key -n C-2 select-window -t :=2
# #bind-key -n C-3 select-window -t :=3
# #bind-key -n C-4 select-window -t :=4
# #bind-key -n C-5 select-window -t :=5
# #bind-key -n C-6 select-window -t :=6
# #bind-key -n C-7 select-window -t :=7
# #bind-key -n C-8 select-window -t :=8
# #bind-key -n C-9 select-window -t :=9
# #bind-key -n C-0 select-window -t :=10
#
# #bind-key -n M-1 select-window -t :=1
# #bind-key -n M-2 select-window -t :=2
# #bind-key -n M-3 select-window -t :=3
# #bind-key -n M-4 select-window -t :=4
# #bind-key -n M-5 select-window -t :=5
# #bind-key -n M-6 select-window -t :=6
# #bind-key -n M-7 select-window -t :=7
# #bind-key -n M-8 select-window -t :=8
# #bind-key -n M-9 select-window -t :=9
# #bind-key -n M-0 select-window -t :=10
#
# # Smart pane switching with awareness of Vim splits.
# # See: https://github.com/christoomey/vim-tmux-navigator
# is_vim="ps -o state= -o comm= -t '#{pane_tty}' \
#     | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?)(diff)?$'"
# bind-key -n 'C-h' if-shell "$is_vim" 'send-keys C-h'  'select-pane -L'
# bind-key -n 'C-j' if-shell "$is_vim" 'send-keys C-j'  'select-pane -D'
# bind-key -n 'C-k' if-shell "$is_vim" 'send-keys C-k'  'select-pane -U'
# # bind-key -n 'C-l' if-shell "$is_vim" 'send-keys C-l'  'select-pane -R'
# tmux_version='$(tmux -V | sed -En "s/^tmux ([0-9]+(.[0-9]+)?).*/\1/p")'
# if-shell -b '[ "$(echo "$tmux_version < 3.0" | bc)" = 1 ]' \
#     "bind-key -n 'C-\\' if-shell \"$is_vim\" 'send-keys C-\\'  'select-pane -l'"
# if-shell -b '[ "$(echo "$tmux_version >= 3.0" | bc)" = 1 ]' \
#     "bind-key -n 'C-\\' if-shell \"$is_vim\" 'send-keys C-\\\\'  'select-pane -l'"
#
# bind-key -T copy-mode-vi 'C-h' select-pane -L
# bind-key -T copy-mode-vi 'C-j' select-pane -D
# bind-key -T copy-mode-vi 'C-k' select-pane -U
# # bind-key -T copy-mode-vi 'C-l' select-pane -R
# bind-key -T copy-mode-vi 'C-\' select-pane -l
#
# # Status
# # The statusbar {
#
# set -g status-position bottom
# set -g status-bg colour234
# set -g status-fg colour137
# set -g status-attr dim
# set -g status-left ''
# set -g status-right '#[fg=colour233,bg=colour241,bold] %m/%d #[fg=colour233,bg=colour245,bold] %I:%M '
# set -g status-right-length 50
# set -g status-left-length 20
#
# setw -g window-status-current-fg colour81
# setw -g window-status-current-bg colour238
# setw -g window-status-current-attr bold
# setw -g window-status-current-format ' #I#[fg=colour250]:#[fg=colour255]#W#[fg=colour50]#F '
#
# setw -g window-status-fg colour138
# setw -g window-status-bg colour235
# setw -g window-status-attr none
# setw -g window-status-format ' #I#[fg=colour237]:#[fg=colour250]#W#[fg=colour244]#F '
#
# setw -g window-status-bell-attr bold
# setw -g window-status-bell-fg colour255
# setw -g window-status-bell-bg colour1
#
# # }
# # The messages {
#
# set -g message-attr bold
# set -g message-fg colour232
# set -g message-bg colour166
