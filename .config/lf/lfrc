# lf
set shellopts '-eu'
set ifs "\n"
set scrolloff 10
set icons
set period 1
set hiddenfiles ".*:*.aux:*.log:*.bbl:*.bcf:*.blg:*.run.xml:lost+found"
set cleaner '~/.config/lf/cleaner'
set previewer '~/.config/lf/scope'
set reverse on
set sortby ctime
set info size
# set mouse on
set autoquit on

# functions
# cmd Link %{{
#     set -- $(cat ~/.local/share/lf/files)
#         mode="$1"
#         shift
#         if [ "$#" -lt 1 ]; then
#             lf -remote "send $id echo no files to link"
#                 exit 0
#                 fi
#     case "$mode" in
# # symbolically copy mode is indicating a soft link
#                 copy) ln -sr -t . -- "$@";;
# # while a move mode is indicating a hard link
#                 move) ln -t . -- "$@";;
#                 esac
#                     rm ~/.local/share/lf/files
#                     lf -remote "send clear"
# }}

cmd mkfile $$EDITOR -p "$(echo $* | tr ' ' '\ ')"

cmd chmod ${{
    clear; printf "Mode Bits: "
        read ans

        for file in "$fx"
            do
                chmod $ans $file
                    done

                    lf -remote 'send reload'
}}

cmd sudomkfile ${{
    clear; printf "File Name: "
        read ans
        sudo $EDITOR $ans
}}


# Archive
cmd zip $zip -r "$f.zip" "$f"
cmd tar $tar cvf "$f.tar" "$f"
cmd targz $tar cvzf "$f.tar.gz" "$f"
cmd tarbz2 $tar cjvf "$f.tar.bz2" "$f"

cmd extract &{{
# :extract [out_dir]
    out_dir="$*"

        if [ -n "$out_dir" ]; then
            mkdir -p "$out_dir"
                cd "$out_dir" || {
                    lf -remote "send $id echoerr unable to create dir"
                        exit 1
                }
    fi

        [ -w . ] || {
            lf -remote "send $id echoerr unable to extract to \
                \'${out_dir:-.}\'. No write permissions"
                exit 1
        }

    lf -remote "send $id echomsg ${f##*/} extracting ..."

    case "$f" in
        *.tar)  tar -xf "$f"       ;;
        *.tar.bz|*.tbz| \
            *.tar.bz2|*.tbz2)
            tar -xjf "$f"      ;;
        *.tar.gz|*.tgz)
            tar -xzf "$f"      ;;
        *.tar.xz|*.txz)
            tar -xJf "$f"      ;;
        *.tar.[zZ]|*.t[zZ])
            tar -xZf "$f"      ;;
        *.tar.lz|*.tlz| \
            *.tar.lzma|*.tlzma| \
            *.tar.lzo|*.tzo| \
            *.tar.zst|*.tzst)
            tar -xaf "$f"      ;;
        *.7z)   7za x -- "$f"      ;;
        *.a|*.ar)
            ar x -- "$f"       ;;
        *.ace)  unace e -- "$f"    ;;
        *.alz)  unalz -- "$f"      ;;
        *.arc|*.ark|*.ARC|*.ARK)
            nomarch -- "$f"    ;;
        *.arj|*.ARJ)
            arj e -r -- "$f"   ;;
        *.bz|*.bz2)
            bunzip2 -k -- "$f" ;;
        *.cab|*.CAB|*.exe|*.EXE)
            cabextract "$f"    ;;
        *.cpio) cpio -id -F "$f"   ;;
        *.deb)  dpkg -x -- "$f" .  ;;
        *.gz)   gunzip -k "$f"     ;;
        *.lha|*.lzh)
            lha x "$f"	       ;;
        *.lrz|*.lrzip|*.rz)
            lrunzip -- "$f"    ;;
        *.lz)   lzip -d -k -- "$f" ;;
        *.lz4)  unlz4 -- "$f"      ;;
        *.lzma) xz -d -k "$f"      ;;
        *.lzo)  lzop -x "$f"       ;;
        *.rar)  unrar x -- "$f"    ;;
        *.src.rpm|*.rpm|*.spm)
            rpm2cpio "$f" | cpio -dium ;;
        *.xz)   unxz -k -- "$f"    ;;
        *.[zZ]) uncompress -- "$f" ;;
        *.zip|*.osz)  unzip -- "$f"      ;;
        *.zst)  unzstd -- "$f"     ;;
        *.AppImage) ./"$f" --appimage-extract ;;
        *)
            lf -remote "send $id echoerr ${f##*/} unknown archive format"
            exit 0
            esac

            if [ -n "$out_dir" ]; then
                lf -remote "send $id select '$out_dir'"
                    fi

                    lf -remote "send $id reload"
                    lf -remote "send $id echomsg ${f##*/} extracted."
}}

cmd extract_sub &{{
# :extract_sub
# -- Extract an archive in subdirectory
    lf -remote "send $id extract '$(basename -- "${f%.*}" .tar)'"
}}

# compress current file or selected files with tar and gunzip
cmd tar ${{
    set -f
        mkdir $1
        cp -r $fx $1
        tar czf $1.tar.gz $1
        rm -rf $1
}}

# compress current file or selected files with zip
cmd zip ${{
    set -f
        mkdir $1
        cp -r $fx $1
        zip -r $1.zip $1
        rm -rf $1
}}

#fzf
cmd fzf_jump ${{
    res="$(find . -maxdepth 3 | fzf --header='Jump to:')"
        if [ -f "$res" ]; then
            cmd="select"
                elif [ -d "$res" ]; then
                cmd="cd"
                fi
                lf -remote "send $id $cmd \"$res\""
}}

# select files commands
# cmd select-files ${{
#     { echo "$fs"; find -L "$(pwd)" -mindepth 1 -maxdepth 1 -type f; } |
#     if [ "$lf_hidden" = "false" ]; then
# # remove any hidden files so you only select files you can see.
#         grep -v '/\.[^/]\+$'
#     else
#         cat
#             fi |
#             sed '/^$/d' | sort | uniq -u |
#             xargs -d '\n' -r -I{} lf -remote "send $id toggle {}"
# }}
# cmd select-dirs ${{
#     { echo "$fs"; find -L "$(pwd)" -mindepth 1 -maxdepth 1 -type d; } |
#     if [ "$lf_hidden" = "false" ]; then
#         grep -v '/\.[^/]\+$'
#     else
#         cat
#             fi |
#             sed '/^$/d' | sort | uniq -u |
#             xargs -d '\n' -r -I{} lf -remote "send $id toggle {}"
# }}

# cmds/functions
cmd open ${{
    clear; case $(file --mime-type "$(readlink -f $f)" -b) in
        application/vnd.openxmlformats-officedocument.spreadsheetml.sheet) setsid -f localc $fx >/dev/null 2>&1;;
        *opendocument*) setsid -f  lowriter $fx >/dev/null 2>&1;;
        text/html) setsid -f $BROWSER $fx >/dev/null 2>&1;;
        text/*|application/json|inode/x-empty|application/x-subrip) $EDITOR $f ;;
        image/x-xcf) setsid -f gimp $fx >/dev/null 2>&1 ;;
        image/svg+xml) display -- $fx ;;
        audio/*|video/x-ms-asf) mpv --audio-display=no $f ;;
        video/*) setsid -f mpv $f -quiet >/dev/null 2>&1 ;;
        image/*) rotdir $f | grep -i "\.\(png\|jpg\|jpeg\|gif\|webp\|tif\|ico\)\(_large\)*$" |
        setsid -f sxiv -aio 2>/dev/null | while read -r file; do
        [ -z "$file" ] && continue
        lf -remote "send select \"$file\""
        lf -remote "send toggle"
        done &
        ;;
        image/vnd.djvu|application/pdf|application/octet-stream|application/postscript|application/epub) setsid -f zathura $f >/dev/null 2>&1 ;;
        application/pgp-encrypted) $EDITOR $fx ;;
        # libreoffice filetypes
        application/vnd.openxmlformats-officedocument.wordprocessingml.document|application/vnd.oasis.opendocument.text) setsid -f lowriter $fx >/dev/null 2>&1 ;;
        application/vnd.openxmlformats-officedocument.spreadsheetml.sheet|application/octet-stream|application/vnd.oasis.opendocument.spreadsheet|application/vnd.oasis.opendocument.spreadsheet-template) setsid -f localc $fx >/dev/null 2>&1 ;;
        application/vnd.openxmlformats-officedocument.presentationml.presentation|application/vnd.oasis.opendocument.presentation-template|application/vnd.oasis.opendocument.presentation|application/vnd.ms-powerpoint) setsid -f loimpress $fx >/dev/null 2>&1 ;;
        application/vnd.oasis.opendocument.graphics|application/vnd.oasis.opendocument.graphics-template) setsid -f lodraw $fx >/dev/null 2>&1 ;;
        application/vnd.oasis.opendocument.formula) setsid -f lomath $fx >/dev/null 2>&1 ;;
        application/vnd.oasis.opendocument.database) setsid -f lobase $fx >/dev/null 2>&1 ;;
        *) for f in $fx; do setsid -f $OPENER $f >/dev/null 2>&1; done;;
    esac
}}

cmd mkdir $mkdir -p "$(echo $* | tr ' ' '\ ')"

cmd upload0x0 ${{
clear; tput cup $(($(tput lines)/3)); tput bold
set -f
printf "%s\n\t" "$f"
printf "Upload to 0x0.st?[y/n]"
read ans
[ $ans = "y" ] && curl -F "file=@$f" 0x0.st | xclip -i -sel c && notify-send "Uploaded to 0x0.st"
}}

cmd pdfConvert ${{
clear; tput cup $(($(tput lines)/3)); tput bold
set -f
printf "%s\n\t" "$fx"
printf "Convert to pdf?[y/N]"
read ans
[ $ans = "y" ] && libreoffice --convert-to pdf $fx --headless
}}

cmd delete ${{
clear; tput cup $(($(tput lines)/3)); tput bold
set -f
printf "%s\n\t" "$fx"
if [ -d $fx ]; then
printf "delete?[yes/no all capitalized]"
read ans
[ $ans = "YES" ] && rm -rf -- $fx
else
printf "delete?[y/n]"
read ans
[ $ans = "y" ] && rm -- $fx
fi
}}

cmd shred ${{
clear; tput cup $(($(tput lines)/3)); tput bold
set -f
printf "%s\n\t" "$fx"
printf "shred?[y/N]"
read ans
[ $ans = "y" ] && shred -uvzn3 -- $fx
}}

cmd moveto ${{
clear; tput cup $(($(tput lines)/3)); tput bold
set -f
clear; echo "Move to where?"
dest="$(sed -e 's/\s*#.*//' -e '/^$/d' -e 's/^\S*\s*//' ${XDG_CONFIG_HOME:-$HOME/.config}/shell/bm-dirs | fzf | sed 's|~|$HOME|')" &&
        for x in $fx; do
            eval mv -iv \'$x\' \"$dest\"
                done &&
                notify-send -t 2000 "ðŸšš File(s) moved." "File(s) moved to $dest."
}}

cmd copyto ${{
    clear; tput cup $(($(tput lines)/3)); tput bold
        set -f
        clear; echo "Copy to where?"
        dest="$(sed -e 's/\s*#.*//' -e '/^$/d' -e 's/^\S*\s*//' ${XDG_CONFIG_HOME:-$HOME/.config}/shell/bm-dirs | fzf | sed 's|~|$HOME|')" &&
        for x in $fx; do
            eval cp -ivr \'$x\' \"$dest\"
                done &&
                notify-send -t 2000 "ðŸ“‹ File(s) copied." "File(s) copies to $dest."
}}

# KeyBindings
map g top
map D delete
map <c-d>D shred
map Y copyto
map M moveto
map Z pdfConvert

map W $setsid -f $TERMINAL >/dev/null 2>&1
map <enter> shell
map x !clear; $f
map X chmod

map U !du -sh
map u :clear; unselect

map <c-g> push :glob-select<space>*.
map J $lf -remote "send $id cd $(sed -e 's/\s*#.*//' -e '/^$/d' -e 's/^\S*\s*//' ${XDG_CONFIG_HOME:-$HOME/.config}/shell/bm-dirs | fzf)"
map <c-f> :fzf_jump
map <c-space> :toggle; up

map o &mimeopen "$f"
map O $clear; mimeopen --ask "$fx"
map <c-o> $clear; mimeopen --ask-default "$f"

map K $kdfzf $fx
map ) upload0x0

map A rename # at the very end
map c push A<c-u> # new rename
map I push A<c-a> # at the very beginning
map i push A<a-b><a-b><a-f> # before extention
map a push A<a-b> # after extention
map B $vimv $fx #bulkrename (formally vidir)
# map b $setbg $fx

# Mouse
# map <m-1>
# map <m-2> open  # primary
# map <m-3> updir  # secondary
# map <m-4> rename  # middle
# map <m-down>  down

# yank
map y
map yy copy
map yp $readlink -f $PWD | xclip -sel c -i # yank path
map yn $basename -a -- $fx | head -c-1 | xclip -selection clipboard -i # yank name
map yP $echo -n $fx | xclip -sel c -i # yank name+path

# archive mappings
map <c-a>z $zip -r "$f.zip" "$f" # zip
map <c-a>t $tar cvf "$f.tar" "$f" # tar
map <c-a>g $tar cvzf "$f.tar.gz" "$f" # targz
map <c-a>b $tar cjvf "$f.tar.bz2" "$f" # tarbz2
map E extract
map <c-e> extract_sub

# map S Link

map m
map mf push :mkfile<space>
map mF sudomkfile
map md push :mkdir<space>

# stipspace
map ss %stripspace "$f"

#dragon
map <c-d>
map <c-d><c-d> %dragon-drop --and-exit -a $fx
map <c-d>m %mvdragon
map <c-d>c %cpdragon
map <c-d>d %dlfile

map q $$HOME/.config/lf/cleaner
map <c-q> quit

map i $$HOME/.config/lf/image clear
# Source Bookmarks
source "~/.config/lf/shortcutrc"
